// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/moisesvega/diffy/internal/editor (interfaces: Open)
//
// Generated by this command:
//
//	mockgen -destination=mock.go -package=editormock -write_generate_directive github.com/moisesvega/diffy/internal/editor Open
//

// Package editormock is a generated GoMock package.
package editormock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

//go:generate mockgen -destination=mock.go -package=editormock -write_generate_directive github.com/moisesvega/diffy/internal/editor Open

// MockOpen is a mock of Open interface.
type MockOpen struct {
	ctrl     *gomock.Controller
	recorder *MockOpenMockRecorder
	isgomock struct{}
}

// MockOpenMockRecorder is the mock recorder for MockOpen.
type MockOpenMockRecorder struct {
	mock *MockOpen
}

// NewMockOpen creates a new mock instance.
func NewMockOpen(ctrl *gomock.Controller) *MockOpen {
	mock := &MockOpen{ctrl: ctrl}
	mock.recorder = &MockOpenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpen) EXPECT() *MockOpenMockRecorder {
	return m.recorder
}

// OpenFile mocks base method.
func (m *MockOpen) OpenFile(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenFile indicates an expected call of OpenFile.
func (mr *MockOpenMockRecorder) OpenFile(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFile", reflect.TypeOf((*MockOpen)(nil).OpenFile), arg0)
}
